type Bolo {
  bolo_id: String!
  vehicle_id: String!
  issue_date: DateTime!
  status: String!
  last_updated: DateTime!
}

type BoloDetails {
  bolo_id: String!
  vehicle_id: String!
  issue_date: DateTime!
  status: String!
  last_updated: DateTime!
  make: String!
  model: String!
  year: GraphQLBigInteger!
  registration_state: String!
  registration_number: String!
  license_state: String!
  driver_id: String!
  driver: Driver
  vehicle: Vehicle
}

type BolosByWeekState {
  week: DateTime!
  state: String!
  num_bolos: GraphQLBigInteger!
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

type Driver {
  driver_id: String!
  first_name: String!
  last_name: String!
  license_number: String!
  license_state: String!
  date_of_birth: String!
  license_status: String!
  license_expiry_date: DateTime!
  last_updated: DateTime!
  bolos(limit: Int = 10, offset: Int = 0): [BoloDetails!]
  vehicles(limit: Int = 10, offset: Int = 0): [Vehicle!]
  warrants(limit: Int = 10, offset: Int = 0): [Warrant!]
}

"An arbitrary precision signed integer"
scalar GraphQLBigInteger

type Mutation {
  Tracking(event: TrackingInput!): TrackingResultOutput!
}

type Query {
  Bolo(limit: Int = 10, offset: Int = 0): [Bolo!]
  "Fetches Bolo details for all vehicles that match the given make and (optional) model."
  BoloDetails(make: String!, model: String!, limit: Int = 10, offset: Int = 0): [BoloDetails!]
  """
  Fetches Bolo (be on the lookout) statistics by week filtered by state. It returns the data ordered
    by week starting from the most recent and going backwards from there.
    The state argument must be a valid two-letter abbreviation of a US state (e.g. CA, WA)
  """
  BolosByWeekState(state: String!, limit: Int = 10, offset: Int = 0): [BolosByWeekState!]
  "Retrieves driver information using their license number."
  Driver(license_number: String!, limit: Int = 10, offset: Int = 0): [Driver!]
  "Retrieves vehicle details using the registration number."
  Vehicle(registration_number: String!, limit: Int = 10, offset: Int = 0): [Vehicle!]
  Warrant(limit: Int = 10, offset: Int = 0): [Warrant!]
  "Fetches statistics on warrants by crime"
  WarrantsByCrime(limit: Int = 10, offset: Int = 0): [WarrantsByCrime!]
  """
  Fetches statistics on warrants issued by state filtered by their status.
  The status of the warrant must be one of: active, urgent, closed, suspended.
  """
  WarrantsByState(status: String!, limit: Int = 10, offset: Int = 0): [WarrantsByState!]
}

type Subscription {
  TrackingAlert: TrackingAlert
}

type Tracking {
  plate: String!
  latitude: Float!
  longitude: Float!
  event_time: DateTime!
}

type TrackingAlert {
  bolo_id: String!
  vehicle_id: String!
  issue_date: DateTime!
  status: String!
  last_updated: DateTime!
  make: String!
  model: String!
  year: GraphQLBigInteger!
  registration_state: String!
  registration_number: String!
  license_state: String!
  driver_id: String!
  latitude: Float!
  longitude: Float!
}

input TrackingInput {
  plate: String!
  latitude: Float!
  longitude: Float!
}

type TrackingResultOutput {
  plate: String!
  latitude: Float!
  longitude: Float!
  event_time: DateTime!
}

type Vehicle {
  vehicle_id: String!
  registration_number: String!
  registration_state: String!
  registration_expiry: DateTime!
  make: String!
  model: String!
  year: GraphQLBigInteger!
  owner_driver_id: String!
  last_updated: DateTime!
  bolos(limit: Int = 10, offset: Int = 0): [BoloDetails!]
  driver: Driver
  tracking(limit: Int = 10, offset: Int = 0): [Tracking!]
}

type Warrant {
  warrant_id: String!
  person_id: String!
  warrant_status: String!
  crime_description: String!
  state_of_issuance: String!
  issue_date: DateTime!
  last_updated: DateTime!
}

type WarrantsByCrime {
  crime: String!
  num_warrants: GraphQLBigInteger!
}

type WarrantsByState {
  state: String!
  status: String!
  num_warrants: GraphQLBigInteger!
}
