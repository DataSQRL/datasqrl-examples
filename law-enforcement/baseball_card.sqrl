IMPORT police-{{variant}}.driver AS _DriverUpdates;
IMPORT police-{{variant}}.vehicle AS _VehicleUpdates;
/*+no_query */
IMPORT police-{{variant}}.warrant;
/*+no_query */
IMPORT police-{{variant}}.bolo;

/**
 Retrieves driver information using their license number.
 */
/*+query_by_all(license_number) */
Driver := DISTINCT _DriverUpdates ON driver_id ORDER BY last_updated DESC;
/**
  Retrieves vehicle details using the registration number.
 */
/*+query_by_all(registration_number) */
Vehicle := DISTINCT _VehicleUpdates ON vehicle_id ORDER BY last_updated DESC;

Driver.warrants := SELECT * FROM Warrant w WHERE w.person_id = this.driver_id ORDER BY issue_date DESC;
Driver.vehicles := SELECT * FROM Vehicle v WHERE v.owner_driver_id = this.driver_id;
Vehicle.driver := SELECT * FROM Driver d WHERE this.owner_driver_id = d.driver_id LIMIT 1;

_EnrichedBolo := SELECT b.bolo_id, b.vehicle_id, b.issue_date, b.status, b.last_updated,
                       v.make, v.model, v.`year`, v.registration_state, v.registration_number,
                       d.license_state, d.driver_id
                       FROM Bolo b
                JOIN Vehicle FOR SYSTEM_TIME AS OF b.last_updated v ON b.vehicle_id = v.vehicle_id
                JOIN Driver  FOR SYSTEM_TIME AS OF b.last_updated d ON d.driver_id = v.owner_driver_id;

--EXPORT _EnrichedBolo TO logger.Bolo;
/**
  Fetches Bolo details for all vehicles that match the given make and (optional) model.
 */
/*+query_by_any(make, model) */
BoloDetails := DISTINCT _EnrichedBolo ON bolo_id ORDER BY last_updated DESC;
BoloDetails.vehicle := SELECT * FROM Vehicle v WHERE v.vehicle_id = this.vehicle_id LIMIT 1;
BoloDetails.driver := SELECT * FROM Driver d WHERE d.driver_id = this.driver_id LIMIT 1;

Driver.bolos := SELECT * FROM BoloDetails b WHERE b.driver_id = this.driver_id ORDER BY issue_date DESC;
Vehicle.bolos := SELECT * FROM BoloDetails b WHERE b.vehicle_id = this.vehicle_id ORDER BY issue_date DESC;

/* Analytics */
/**
Fetches statistics on warrants issued by state filtered by their status.
The status of the warrant must be one of: active, urgent, closed, suspended.
 */
/*+query_by_any(status) */
WarrantsByState := SELECT state_of_issuance AS state, warrant_status AS status, COUNT(1) as num_warrants
                   FROM Warrant GROUP BY state_of_issuance, warrant_status ORDER BY state ASC, status ASC;

/**
  Fetches statistics on warrants by crime
 */
WarrantsByCrime := SELECT crime_description AS crime, COUNT(1) as num_warrants
                   FROM Warrant
                   WHERE warrant_status = 'active' OR warrant_status = 'urgent'
                   GROUP BY crime_description ORDER BY crime ASC;

/**
  Fetches Bolo (be on the lookout) statistics by week filtered by state. It returns the data ordered
  by week starting from the most recent and going backwards from there.
  The state argument must be a valid two-letter abbreviation of a US state (e.g. CA, WA)
 */
/*+query_by_any(state) */
BolosByWeekState := SELECT window_time AS week,
                           registration_state AS state, COUNT(1) as num_bolos
                FROM TABLE(TUMBLE(TABLE _EnrichedBolo, DESCRIPTOR(`last_updated`), INTERVAL '7' DAY))
                      GROUP BY registration_state, window_start, window_end, window_time
                      ORDER BY window_time DESC, state ASC;


/*+ test */
BolosWATest := SELECT * FROM BolosByWeekState WHERE state = 'WA';

/*+ test */
WarrantsTest := SELECT warrant_status, COUNT(1) AS num_warrants
                FROM Warrant GROUP BY warrant_status ORDER BY warrant_status ASC;



/* License plate tracking and alerting */

/*+no_query*/
CREATE TABLE Tracking (
   plate STRING NOT NULL,
   latitude decimal(8,3) NOT NULL,
   longitude decimal(8,3) NOT NULL,
   event_time TIMESTAMP_LTZ(3) NOT NULL METADATA FROM 'timestamp'
);

Vehicle.tracking := SELECT * FROM Tracking t WHERE t.plate = this.registration_number ORDER BY t.event_time DESC;

TrackingAlert := SUBSCRIBE SELECT b.*, t.latitude, t.longitude FROM Tracking t
                 INNER JOIN _EnrichedBolo b ON b.registration_number = t.plate
                 WHERE b.status = 'active'
                   AND b.last_updated < t.event_time AND b.last_updated + INTERVAL 60 DAYS >= t.event_time;

--EXPORT TrackingAlert TO logger.Alert;
