IMPORT creditcard-{{variant}}.merchant AS _MerchantStream;
IMPORT creditcard-{{variant}}.card_assignment AS _CardAssignmentStream;
IMPORT creditcard-{{variant}}.transaction AS _Transaction;
IMPORT creditcard-{{variant}}.merchant_reward AS _MerchantRewardStream;

/* Deduplicate CDC Streams */
_Merchant       := DISTINCT _MerchantStream ON merchantId ORDER BY updatedTime DESC;
_CardAssignment := DISTINCT _CardAssignmentStream ON cardNo ORDER BY `timestamp` DESC;
_MerchantReward := DISTINCT _MerchantRewardStream ON merchantId ORDER BY updatedTime DESC;

/* Part 1: Compute customer rewards */
_CustomerTransaction := SELECT t.transactionId, t.cardNo, t.`time`, t.amount, m.name AS merchantName,
                               m.merchantId, m.category, c.customerId, c.cardType
                        FROM _Transaction t
                        JOIN _CardAssignment FOR SYSTEM_TIME AS OF t.`time` c ON t.cardNo = c.cardNo
                        JOIN _Merchant FOR SYSTEM_TIME AS OF t.`time` m ON t.merchantId = m.merchantId;

_CustomerTransactionRewards := SELECT t.*, r.rewardsByCard AS rewards
                               FROM _CustomerTransaction t
                               JOIN _MerchantReward FOR SYSTEM_TIME AS OF t.`time` r ON r.merchantId = t.merchantId;

_CustomerTransactionRewardsByCard := SELECT t.*, t.amount * (r.rewardPercentage / 100.0) as reward, r.cardType AS rewardCardType
                                     FROM _CustomerTransactionRewards t CROSS JOIN UNNEST(t.rewards) r
                                     WHERE UNIX_TIMESTAMP(DATE_FORMAT(t.`time`,'yyyy-MM-dd HH:mm:ss')) BETWEEN r.startTimestamp AND r.expirationTimestamp;

/*+no_query */
CustomerRewards := SELECT transactionId, customerId, cardNo, cardType, `time`, amount, reward, merchantName
                   FROM _CustomerTransactionRewardsByCard
                   WHERE cardType = rewardCardType;

/** Returns all the rewards that a customer (identified by customerId) has earned since fromTime (inclusive) until toTime (exclusive)..
  fromTime and toTime must be RFC-3339 compliant date time scalar. Both must be the start of a day, e.g. 2024-01-19T00:00:00-00:00.
 */
/* Part 2a: Query and Analyze Rewards */
Rewards(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId', fromTime TIMESTAMP NOT NULL, toTime TIMESTAMP NOT NULL) :=
  SELECT * FROM CustomerRewards WHERE customerId = :customerId AND :fromTime <= `time` AND :toTime > `time`
  ORDER BY `time` DESC;

_TotalReward := SELECT customerId, SUM(reward) AS total_reward,
                      MIN(`time`) as since_time
                FROM CustomerRewards GROUP BY customerId LIMIT 1;

/** Returns the total amount of rewards the customer has earned to date and the time since when they eared rewards */
TotalReward(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId') :=
  SELECT * FROM _TotalReward WHERE customerId = :customerId;

_RewardsByDay := SELECT customerId, window_time as timeDay, SUM(reward) as total_reward
                FROM TABLE(TUMBLE(TABLE CustomerRewards, DESCRIPTOR(`time`), INTERVAL '1' DAY))
                GROUP BY customerId, window_start, window_end, window_time
                ORDER BY window_time DESC;

/** Returns the total awards a customer earned by day starting from the most recent day.
  Use limit and offset to control how many days to return and when to start. */
RewardsByDay(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId') :=
  SELECT * FROM _RewardsByDay WHERE customerId = :customerId ORDER BY customerId DESC, timeDay DESC LIMIT 5;

/* Part 2b: Compute potential rewards for personalized sales */
/*+no_query */
CustomerPotentialRewards := SELECT transactionId, customerId, rewardCardType, `time`, amount, reward, merchantName
                            FROM _CustomerTransactionRewardsByCard
                            WHERE cardType <> rewardCardType;

/** Returns all the potential rewards a customer could have earned since fromTime (inclusive) and until toTime (exclusive) for the given card type.
  Use this function to show customers the rewards they would have earned if they had the given card.
  cardType must be one of [travel, sports, business, family].
  fromTime and toTime must be RFC-3339 compliant date time scalar. Both must be the start of a day, e.g. 2024-01-19T00:00:00-00:00. */
PotentialRewards(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId',
                 cardType STRING NOT NULL,
                 fromTime TIMESTAMP NOT NULL,
                 toTime TIMESTAMP NOT NULL) :=
  SELECT * FROM CustomerPotentialRewards
  WHERE customerId = :customerId AND :fromTime <= `time` AND :toTime > `time` AND rewardCardType = :cardType
  ORDER BY `time` DESC;

/** Returns the total amount of rewards the customer could have earned for each type of credit card the customer does not yet have.
  Use this function to determine which credit card type to recommend to a customer. */
TotalPotentialReward(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId') :=
  SELECT customerId, rewardCardType AS cardType, SUM(reward) AS total_reward, MIN(`time`) as since_time
  FROM CustomerPotentialRewards
  WHERE customerId = :customerId
  GROUP BY customerId, rewardCardType
  ORDER BY cardType DESC;

_PotentialRewardsByDay := SELECT customerId, rewardCardType AS cardType, window_time as timeDay, SUM(reward) as total_reward
                          FROM TABLE(TUMBLE(TABLE CustomerPotentialRewards, DESCRIPTOR(`time`), INTERVAL '1' DAY))
                          GROUP BY customerId, window_start, window_end, window_time, rewardCardType
                          ORDER BY window_time DESC, rewardCardType ASC;

/** Returns the total rewards a customer could have earned for a given card type by day starting from the most recent day. Use this function to show the customer what their reward earnings would have looked like, if they had a given card.
 cardType must be one of [travel, sports, business, family]. Use limit and offset to control how many days to return when to start.
*/
PotentialRewardsByDay(customerId BIGINT NOT NULL METADATA FROM 'auth.customerId') :=
  SELECT * FROM _PotentialRewardsByDay WHERE customerId = :customerId LIMIT 5;

/** Returns the rewards for a given customer immediately */
NewCustomerRewards(customerId BIGINT) := SUBSCRIBE SELECT * FROM CustomerRewards WHERE customerId = :customerId;

/* ==== TEST CASES ==== */

/*+test */
CustomerRewardsTest := SELECT * FROM CustomerRewards ORDER BY cardType DESC, `time` DESC LIMIT 5;
