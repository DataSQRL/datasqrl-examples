type Assets {
  asset_id: GraphQLBigInteger!
  asset_number: String!
  asset_name: String!
  asset_category_id: GraphQLBigInteger!
  description: String!
  date_placed_in_service: String!
  asset_cost: GraphQLBigInteger!
  status: String!
  asset_manual: String!
  lastUpdated: DateTime!
  flowrate(limit: Int = 10, offset: Int = 0): [FlowrateByMinute!]
  maintenance(limit: Int = 10, offset: Int = 0): [Maintenance!]
  pressure(limit: Int = 10, offset: Int = 0): [PressureByMinute!]
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

type FlowRate {
  assetId: GraphQLBigInteger!
  flowrate: Float!
  event_time: DateTime!
}

type FlowrateByMinute {
  assetId: GraphQLBigInteger!
  timestamp_min: DateTime!
  avg_flowrate: Float!
  max_flowrate: Float!
}

"An arbitrary precision signed integer"
scalar GraphQLBigInteger

type Maintenance {
  work_order_id: GraphQLBigInteger!
  work_order_num: String!
  asset_id: GraphQLBigInteger!
  description: String!
  wo_type: String!
  priority: String!
  status: String!
  request_date: String!
  start_date: String
  completion_date: String
  lastUpdated: DateTime!
}

type PressureByMinute {
  assetId: GraphQLBigInteger!
  timestamp_min: DateTime!
  avg_pressure_psi: Float!
  max_pressure_psi: Float!
  avg_temperature_f: Float!
}

type Query {
  """
  Returns information about the well/asset including it's maintenance records, manual,
    description, and other important information.
  """
  Assets(asset_id: GraphQLBigInteger!, limit: Int = 10, offset: Int = 0): [Assets!]
  FlowRate(limit: Int = 10, offset: Int = 0): [FlowRate!]
  "Returns the average/maximum flow rate for a given asset for minute time intervals"
  FlowrateByMinute(assetId: GraphQLBigInteger!, limit: Int = 10, offset: Int = 0): [FlowrateByMinute!]
  """
  Returns the average/maximum pressure and average temperature for a given asset
    for minute time intervals
  """
  PressureByMinute(assetId: GraphQLBigInteger!, limit: Int = 10, offset: Int = 0): [PressureByMinute!]
  """
  Returns all FlowRate readings within the provided [minRate,maxRate] interval across
    all assets.
  """
  FlowRateByRange(minRate: Float!, maxRate: Float!, limit: Int = 10, offset: Int = 0): [FlowRate!]
}
