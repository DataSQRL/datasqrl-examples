name: Build and test DataSQRL Examples on sqrl v0.5

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - example: recommendation
            path: clickstream-ai-recommendation
            test_commands: |
              test -c package.json --snapshot snapshots

    env:
      TZ: 'America/Los_Angeles'
      SQRL_VERSION: 'v0.5.10'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Timezone
      uses: szenius/set-timezone@v1.1
      with:
        timezoneLinux: "America/Los_Angeles"

    - name: Pull SQRL Docker image
      run: docker pull datasqrl/cmd:${{ env.SQRL_VERSION }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Run ${{ matrix.example }} Tests
      working-directory: ${{ matrix.path }}
      run: |
        if [ -z "${{ matrix.test_commands }}" ]; then
          echo "No test commands specified for ${{ matrix.example }}"
          exit 1
        fi

        while IFS= read -r cmd; do
          echo "Running: $cmd"
          docker run -i -p 8888:8888 -p 8081:8081 -p 9092:9092 --rm -v $PWD:/build datasqrl/cmd:${SQRL_VERSION} $cmd
        done <<< "${{ matrix.test_commands }}"

    - name: Write Dockerfile
      run: |
        cat <<EOF > ${{ matrix.path }}/Dockerfile
        FROM datasqrl/cmd:${SQRL_VERSION}

        ENV TZ="UTC"

        COPY . /build
        WORKDIR /build
        EOF

    - name: Publish ${{ matrix.example }}
      uses: docker/build-push-action@v3
      with:
        context: ./${{ matrix.path }}
        file: ./${{ matrix.path }}/Dockerfile
        push: true
        tags: datasqrl/examples:${{ matrix.example }}
        platforms: linux/amd64,linux/arm64
