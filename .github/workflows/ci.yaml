name: CI

on:
  pull_request:
    branches:
      - "main"

concurrency:
  # If you have multiple workflows in the same repository,
  # concurrency group names must be unique across workflows to avoid canceling in-progress jobs or runs from other workflows.
  # Otherwise, any previously in-progress or pending job will be canceled, regardless of the workflow.
  # To only cancel in-progress runs of the same workflow, you can use the github.workflow property to build the concurrency group:

  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build-artifacts:
    name: "BuildArtifacts"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: read
    env:
      ENV: DEV
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          # TODO: change value of secrets AWS_DEV_GITHUB_ACTION_ROLE to arn instead of name now 
          # role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          role-to-assume: arn:aws:iam::286928876767:role/${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Getting Code
        uses: actions/checkout@v3

      - name: Build Artifacts
        run: |
          cd ${{ github.workspace }}/finance-credit-card-chatbot
          docker run --rm -v $PWD:/build datasqrl/cmd:v0.5.2 compile -c package-analytics-local.json
          cd build/deploy
          ls -la
          docker compose build
          docker images
        shell: bash
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Tag and Push Docker Images to ECR repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          export ECR_REPOSITORY="datasqrl-examples/finance-credit-card-chatbot/package-analytics-kafka"
          export IMAGE_TAG="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          docker tag deploy-database:latest $IMAGE_TAG
          docker push $IMAGE_TAG

        shell: bash
  
  # deploy test infrastructure