name: Build and test DataSQRL Examples

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - example: recommendation
            path: clickstream-ai-recommendation
            test_commands: |
              compile -c recommendation_package_api.json
              compile -c recommendation_package_kafka.json

          - example: finance-rewards
            path: finance-credit-card-examples/finance-credit-card-rewards-example
            test_commands: |
              compile -c creditcard_rewards_package_test.json
              compile -c creditcard_rewards_package_kafka.json
              test -c creditcard_rewards_package_test.json
          - example: finance-analytics
            path: finance-credit-card-examples/finance-credit-card-analytics-example
            test_commands: |
              compile -c creditcard_analytics_package_test.json
              compile -c creditcard_analytics_package_kafka.json
              test -c creditcard_analytics_package_test.json

          - example: healthcare-analytics
            path: healthcare-study-examples/healthcare-study-analytics-example
            test_commands: |
              compile -c study_analytics_package_test.json
              test -c study_analytics_package_test.json
            # FIXME https://github.com/DataSQRL/sqrl/issues/1140 compile -c study_analytics_package_snowflake.json
          - example: healthcare-api
            path: healthcare-study-examples/healthcare-study-api-example
            test_commands: |
              compile -c study_api_package_api.json
              compile -c study_api_package_test.json
              test -c study_api_package_test.json
          - example: healthcare-stream
            path: healthcare-study-examples/healthcare-study-stream-example
            test_commands: |
              compile -c study_stream_package_kafka.json
              compile -c study_stream_package_test.json
              test -c study_stream_package_test.json

          - example: logistics
            path: logistics-shipping-geodata
            test_commands: |
              compile -c logistics_package_test.json
              test -c logistics_package_test.json

          - example: iot-sensor
            path: iot-sensor-metrics
            test_commands: |
              compile -c sensor_package_api.json
              compile -c sensor_package_test.json
              test -c sensor_package_test.json
              test -c sensor_package_api.json

          - example: law
            path: law-enforcement
            test_commands: |
              compile -c baseball_card_package_test.json
              test -c baseball_card_package_test.json

          - example: oil-gas-monitoring
            path: oil-gas-agent-automation-examples/oil-gas-agent-monitoring-example
            test_commands: |
              compile -c monitoring_agent_package_test.json
          - example: oil-gas-operations
            path: oil-gas-agent-automation-examples/oil-gas-agent-operations-example
            test_commands: |
              compile -c operations_agent_package_test.json
              test -c operations_agent_package_test.json

          - example: usage-analytics
            path: usage-analytics
            test_commands: |
              compile -c package-test.json
              test -c package-test.json

    env:
      TZ: 'America/Los_Angeles'
      SQRL_VERSION: 'dev'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Timezone
      uses: szenius/set-timezone@v1.1
      with:
        timezoneLinux: "America/Los_Angeles"

    - name: Cache Docker images
      uses: ScribeMD/docker-cache@0.5.0
      with:
        # one cache entry per SQRL version & OS
        key: sqrl-${{ runner.os }}-${{ env.SQRL_VERSION }}

    - name: Pull SQRL Docker image
      run: docker pull datasqrl/cmd:${{ env.SQRL_VERSION }}

    - name: Run ${{ matrix.example }} Tests
      working-directory: ${{ matrix.path }}
      run: |
        # Read raw lines from the matrix value
        mapfile -t raw_cmds <<< "${{ matrix.test_commands }}"
       
        # Keep only non‑empty lines
        cmds=()
        for c in "${raw_cmds[@]}"; do
          [[ -z "${c//[[:space:]]/}" ]] && continue   # skip blanks
          cmds+=("$c")
        done

        if (( ${#cmds[@]} == 0 )); then
          echo "ERROR: No test commands specified for ${{ matrix.example }}"
          exit 1
        fi

        for cmd in "${cmds[@]}"; do
          echo "::group::Running: $cmd"
          docker run -i -p 8888:8888 -p 8081:8081 -p 9092:9092 \
            --rm -v "$PWD":/build "datasqrl/cmd:${SQRL_VERSION}" $cmd
          echo "::endgroup::"
        done

    - name: Write Dockerfile
      run: |
        cat <<EOF > ${{ matrix.path }}/Dockerfile
        FROM datasqrl/cmd:${SQRL_VERSION}

        ENV TZ="UTC"

        COPY . /build
        WORKDIR /build
        EOF

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish ${{ matrix.example }}
      uses: docker/build-push-action@v3
      with:
        context: ./${{ matrix.path }}
        file: ./${{ matrix.path }}/Dockerfile
        push: true
        tags: datasqrl/examples:${{ matrix.path }}
        platforms: linux/amd64,linux/arm64

  ci-summary:
    name: build ✅ summary
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Fail if any build job failed
        run: |
          failed=$(jq -r '.[] | select(.result=="failure")' <<< '${{ toJson(needs) }}' | wc -l)
          if [[ "$failed" -gt 0 ]]; then
            echo "::error ::${failed} matrix job(s) failed"
            exit 1
          fi
