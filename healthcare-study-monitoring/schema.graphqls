type AddClinicalData {
  sensorId: GraphQLBigInteger!
  metric: Float!
  timestamp: DateTime!
}

input AddClinicalDataInput {
  sensorId: GraphQLBigInteger!
  metric: Float!
}

type AddClinicalDataResultOutput {
  sensorId: GraphQLBigInteger!
  metric: Float!
  timestamp: DateTime!
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"An arbitrary precision signed integer"
scalar GraphQLBigInteger

type IndicatorAlerts {
  sensorId: GraphQLBigInteger!
  metric: Float!
  timestamp: DateTime!
  sensorId0: GraphQLBigInteger!
  patientId: GraphQLBigInteger!
  metadataId: GraphQLBigInteger!
  eventId: String!
  placedTimestamp: DateTime!
  metadataId0: GraphQLBigInteger!
  name: String!
  lowRange: Float!
  highRange: Float!
  lastUpdated: DateTime!
}

type Mutation {
  AddClinicalData(event: AddClinicalDataInput!): AddClinicalDataResultOutput!
}

type PatientMetricsHourly {
  patientId: GraphQLBigInteger!
  timeHour: DateTime!
  metadataId: GraphQLBigInteger!
  name: String!
  avgMetric: Float!
}

type Patients {
  patientId: GraphQLBigInteger!
  studyId: GraphQLBigInteger!
  name: String!
  bloodGroup: String
  dateOfBirth: String
  diagnosis: String
  lastUpdated: DateTime!
  metrics(limit: Int = 10, offset: Int = 0): [PatientMetricsHourly!]
}

type Query {
  AddClinicalData(limit: Int = 10, offset: Int = 0): [AddClinicalData!]
  Patients(patientId: GraphQLBigInteger!, limit: Int = 10, offset: Int = 0): [Patients!]
  PatientsByName(name: String!, limit: Int = 10, offset: Int = 0): [Patients!]
}

type Subscription {
  IndicatorAlerts: IndicatorAlerts
}
