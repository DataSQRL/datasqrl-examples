type AddClinicalData {
  sensorId: Long!
  metric: Float!
  timestamp: DateTime!
}

input AddClinicalDataInput {
  sensorId: Long!
  metric: Float!
}

type AddClinicalDataResultOutput {
  sensorId: Long!
  metric: Float!
  timestamp: DateTime!
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A 64-bit signed integer"
scalar Long

type IndicatorAlerts {
  sensorId: Long!
  metric: Float!
  timestamp: DateTime!
  sensorId0: Long!
  patientId: Long!
  metadataId: Long!
  eventId: String!
  placedTimestamp: DateTime!
  metadataId0: Long!
  name: String!
  lowRange: Float!
  highRange: Float!
  lastUpdated: DateTime!
}

type Mutation {
  AddClinicalData(event: AddClinicalDataInput!): AddClinicalDataResultOutput!
}

type PatientMetricsHourly {
  patientId: Long!
  timeHour: DateTime!
  metadataId: Long!
  name: String!
  avgMetric: Float!
}

type Patients {
  patientId: Long!
  studyId: Long!
  name: String!
  bloodGroup: String
  dateOfBirth: String
  diagnosis: String
  lastUpdated: DateTime!
  metrics(limit: Int = 10, offset: Int = 0): [PatientMetricsHourly!]
}

type Query {
  AddClinicalData(limit: Int = 10, offset: Int = 0): [AddClinicalData!]
  Patients(patientId: Long!, limit: Int = 10, offset: Int = 0): [Patients!]
  PatientsByName(name: String!, limit: Int = 10, offset: Int = 0): [Patients!]
}

type Subscription {
  IndicatorAlerts: IndicatorAlerts
}
