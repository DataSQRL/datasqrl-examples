/*+no_query */
IMPORT clickstream-{{variant}}.clickstream;

/*+no_query */
IMPORT content-{{variant}}.content;

/* Find next page visits within 10 minutes */
_CoVisits := SELECT b.url AS beforeURL, a.url AS afterURL,
                   a.event_time AS `timestamp`
            FROM Clickstream b INNER JOIN Clickstream a ON b.userid=a.userid
                   AND b.event_time < a.event_time AND
                       b.event_time >= a.event_time - INTERVAL 10 MINUTE;
/* Recommend pages that are visited shortly after */
/*+query_by_all(url) */
Recommendation := SELECT beforeURL AS url, afterURL AS recommendation,
                         count(1) AS frequency FROM _CoVisits
                  GROUP BY beforeURL, afterURL
                  ORDER BY url ASC, frequency DESC;

IMPORT stdlib.openai.vector_embed;

_ContentEmbedding := SELECT *, vector_embed(text, 'text-embedding-3-small') AS embedding FROM Content;

EXPORT _ContentEmbedding TO logger.content;

/*+vector_dim(embedding, 1536), index(VECTOR_COSINE, embedding) */
_DistinctContent := DISTINCT _ContentEmbedding ON url ORDER BY update_time DESC;

_UserInterest := SELECT userid, CENTER(embedding) AS interest FROM Clickstream click
                JOIN _DistinctContent FOR SYSTEM_TIME AS OF click.event_time content ON content.url = click.url
                GROUP BY userid;

SimilarContent(userid STRING NOT NULL) :=
    SELECT c.*, coalesce(cosine_similarity(c.embedding, u.interest), 0.0) as similarity
    FROM _DistinctContent c JOIN (SELECT * FROM _UserInterest WHERE userid = :userid) u ON true
    ORDER BY similarity DESC LIMIT 10;
