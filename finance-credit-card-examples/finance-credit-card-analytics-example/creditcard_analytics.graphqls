scalar DateTime
scalar Long

type Query {
    """
    Returns all credit card transactions within a specified time period ordered by time (most recent first).
    """
    Transactions(
        """
        customerId: The ID of the customer whose transactions to query.
        """
        customerId: Long!,
        """
        fromTime: RFC-3339 compliant date time scalar. Returns transactions after this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`.
        """
        fromTime: DateTime!,
        """
        toTime: RFC-3339 compliant date time scalar. Returns transactions up to this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`.
        """
        toTime: DateTime!
    ): [CustomerTransaction!]

    """
    Returns the total customer spending by day for the specified time period ordered by time (most recent first). When a particular day does not have any spending, no record is returned for that day.
    """
    SpendingByDay(
        """
        customerId: The ID of the customer whose spending to query.
        """
        customerId: Long!,
        """
        fromTime: RFC-3339 compliant date time scalar. Returns spending from this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`.
        """
        fromTime: DateTime!,
        """
        toTime: RFC-3339 compliant date time scalar. Returns spending up to this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`.
        """
        toTime: DateTime!
    ): [CustomerSpendingByDay!]

    """
    Returns the customer spending by category by week in decreasing order of time, i.e. showing the most recent week first, then the week before that and so forth.
    """
    SpendingByCategory(
        """
        customerId: The ID of the customer whose spending to query.
        """
        customerId: Long!,
        """
        limit: The number of spending records to return. Each week has 12 records - one for each spending category. To return the spending records for multiple weeks, multiple the number of weeks by 12. For example, to return spending records for 5 week, set the limit to 60.
        """
        limit: Int = 10,
        offset: Int = 0
    ): [CustomerSpendingByCategory!]

    """
    Retrieves User Chat Messages
    """
    InternalGetChatMessages(
        customerId: Int!,
        limit: Int = 10,
        offset: Int = 0
    ): [CustomerChatMessage!]
}

type CustomerTransaction {
    transactionId: Long!
    cardNo: String!
    time: String!
    amount: Float!
    merchantName: String!
    category: String!
}

type CustomerSpendingByCategory {
    timeWeek: String!
    category: String!
    spending: Float!
}

type CustomerSpendingByDay {
    timeDay: String!
    spending: Float!
}

type CustomerChatMessage {
    role: String!
    content: String!
    name: String
    functionCall: String
    customerId: Int!
    timestamp: String!
    uuid: String!
}

type Subscription {
    NewCustomerTransaction(customerId: Long!): CustomerTransaction
}

type Mutation {
    InternalSaveChatMessage(message: ChatMessageInput!): CreatedChatMessage
}

input ChatMessageInput {
    role: String!
    content: String!
    name: String
    functionCall: String
    customerId: Int
}

type CreatedChatMessage {
    event_time: String!
}
